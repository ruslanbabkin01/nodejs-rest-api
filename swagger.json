{
  "openapi": "3.0.0",
  "info": {
    "version": "0.0.1",
    "title": "Contacts API 1.0",
    "description": "[ CONTACTS-API ](https://ruslanbabkin01.github.io/goit-react-hw-08-phonebook)",
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/licenses/MIT"
    },
    "consumes": [
      "application/json",
      "multipart/form-data",
      "image/png",
      "image/jpg",
      "image/gif",
      "image/web"
    ],
    "produces": ["application/json"],
    "contact": {
      "email": "example@gmail.com"
    }
  },
  "servers": [
    {
      "url": "https://contacts-api-9mom.onrender.com/"
    },
    {
      "url": "http://localhost:4321"
    }
  ],
  "tags": [
    {
      "name": "Auth",
      "description": "Authorization endpoints"
    },
    {
      "name": "Users",
      "description": "Users endpoints"
    },
    {
      "name": "Contacts",
      "description": "Contacts endpoints"
    }
  ],

  "paths": {
    "/api/auth/register": {
      "post": {
        "tags": ["Auth"],
        "summary": "User registration",
        "requestBody": {
          "description": "Registration's object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User created successfully. Verification email has been sent to your email",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegisterResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "409": {
            "description": "User with this email already exists!"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },

    "/api/auth/login": {
      "post": {
        "tags": ["Auth"],
        "summary": "User login",
        "parameters": [],
        "security": [],
        "requestBody": {
          "description": "Login object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User has been logged in successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "400": {
            "description": "Bad request"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },

    "/api/auth/logout": {
      "post": {
        "tags": ["Auth"],
        "summary": "User logout",
        "parameters": [],
        "security": [{ "Bearer": [] }],
        "requestBody": {},
        "responses": {
          "200": {
            "description": "User has been logged out successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },

    "/api/auth/refresh": {
      "post": {
        "tags": ["Auth"],
        "summary": "Get new pair of tokens (use Bearer {refreshToken} instead of accessToken)",
        "security": [{ "Bearer": [] }],
        "requestBody": {
          "description": "Refresh token",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RefreshRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Refresh tokens",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RefreshResponse"
                }
              }
            }
          },
          "403": {
            "description": "Token invalid"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },

    "/api/auth/google": {
      "get": {
        "tags": ["Auth"],
        "summary": "Google authentication. WARNING: Works only for sign-in, after registered on front-end (if you're writing your back-end for a SPECIFIC front-end, then you can configure it right to work both for sign-up & sign-in)",
        "responses": {
          "200": {
            "description": "Successful operation (redirect to front-end with accessToken, refreshToken and sid in query). Then use GET /user",
            "content": {}
          },
          "403": {
            "description": "Not registered or registered with postman",
            "content": {}
          }
        }
      }
    },

    "/api/users/current": {
      "get": {
        "tags": ["Users"],
        "summary": "Get personal information about the user",
        "security": [{ "Bearer": [] }],
        "requestBody": {},
        "responses": {
          "200": {
            "description": "Get current user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserSchema"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },

    "/api/users": {
      "patch": {
        "tags": ["Users"],
        "summary": "Update user's subscription",
        "security": [{ "Bearer": [] }],
        "requestBody": {
          "description": "Update subscription",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SubscriptionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Update subscription",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegisterResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },

    "/api/users/verify": {
      "post": {
        "tags": ["Users"],
        "summary": "Sending a email for user verification",
        "security": [{ "Bearer": [] }],
        "requestBody": {
          "description": "User's verify",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VerifyRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Verification email sent",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageResponse"
                }
              }
            }
          },
          "400": {
            "description": "Verification has already been passed"
          },
          "404": {
            "description": "Missing required field email"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },

      "get": {
        "tags": ["Users"],
        "summary": "User's verify",
        "parameters": [
          {
            "in": "path",
            "name": "Verification token",
            "required": true,
            "type": "string",
            "description": "Token for verification"
          }
        ],
        "requestBody": {},
        "responses": {
          "200": {
            "description": "Verification successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageResponse"
                }
              }
            }
          },
          "404": {
            "description": "User not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },

    "/api/users/avatars": {
      "patch": {
        "tags": ["Users"],
        "summary": "Update user's avatar",
        "security": [{ "Bearer": [] }],
        "requestBody": {
          "description": "Update avatar",
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/UpdateAvatarRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Update avatar",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateAvatarResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },

    "/api/contacts": {
      "get": {
        "tags": ["Contacts"],
        "summary": "Get contacts",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "The number of page to set results",
            "type": "integer"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The numbers of items to return",
            "type": "integer"
          },
          {
            "name": "favorite",
            "in": "query",
            "description": "The favorite contacts to return",
            "type": "boolean"
          }
        ],
        "security": [{ "Bearer": [] }],
        "requestBody": {},
        "responses": {
          "200": {
            "description": "Get contacts",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetContactsResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Invalid signature"
          }
        }
      },

      "post": {
        "tags": ["Contacts"],
        "summary": "Create contact",
        "security": [{ "Bearer": [] }],
        "requestBody": {
          "description": "Create contact",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContactRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Contact has been created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactSchema"
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Invalid signature"
          }
        }
      }
    },

    "/api/contacts/{contactId}": {
      "get": {
        "tags": ["Contacts"],
        "summary": "Get contact by id",
        "parameters": [
          {
            "in": "path",
            "name": "contactId",
            "required": true,
            "type": "string",
            "description": "Contact id"
          }
        ],
        "security": [{ "Bearer": [] }],
        "requestBody": {},
        "responses": {
          "200": {
            "description": "Contact by id has been found successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactSchema"
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Invalid signature"
          }
        }
      },

      "delete": {
        "tags": ["Contacts"],
        "summary": "Remove contact by id",
        "parameters": [
          {
            "in": "path",
            "name": "contactId",
            "required": true,
            "type": "string",
            "description": "Contact Id"
          }
        ],
        "security": [{ "Bearer": [] }],
        "requestBody": {},
        "responses": {
          "200": {
            "description": "Contact by id has been deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteContactResponse"
                }
              }
            }
          },
          "400": {
            "description": "Not correct id format"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Invalid signature"
          }
        }
      },

      "put": {
        "tags": ["Contacts"],
        "summary": "Update contact by id",
        "parameters": [
          {
            "in": "path",
            "required": true,
            "name": "contactId",
            "type": "string",
            "description": "Contact id"
          }
        ],
        "security": [{ "Bearer": [] }],
        "requestBody": {
          "description": "Update contact by id",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContactRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Contact by id has been updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactSchema"
                }
              }
            }
          },
          "400": {
            "description": "Not correct id format"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Invalid signature"
          }
        }
      }
    },

    "/api/contacts/{contactId}/favorite": {
      "patch": {
        "tags": ["Contacts"],
        "summary": "Update favorite contact status",
        "parameters": [
          {
            "in": "path",
            "name": "contactId",
            "required": true,
            "type": "string",
            "description": "Contact id"
          }
        ],
        "security": [{ "Bearer": [] }],
        "requestBody": {
          "description": "Update favorite contact status",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateFavoriteRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Contact status has been updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactSchema"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Invalid signature"
          }
        }
      }
    }
  },

  "components": {
    "schemas": {
      "UserSchema": {
        "required": ["email", "password", "name"],
        "properties": {
          "_id": {
            "type": "string",
            "format": "ObjectId",
            "uniqueItems": true
          },
          "name": {
            "type": "string",
            "description": "User`s name",
            "example": "FirstName LastName"
          },
          "email": {
            "type": "string",
            "format": "email"
          },
          "subscription": {
            "type": "string",
            "description": "Subscription",
            "example": "starter"
          },
          "avatarURL": {
            "type": "string",
            "description": "User's avatar",
            "example": "//www.gravatar.com/avatar/b3fb751fb35b32c904fb69f8e3f3bb97"
          }
        }
      },

      "ContactSchema": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "format": "ObjectId",
            "uniqueItems": true
          },
          "name": {
            "type": "string",
            "description": "Contacts name",
            "example": "John"
          },
          "email": {
            "type": "string",
            "description": "Contacts email",
            "example": "example@mail.com",
            "format": "email"
          },
          "number": {
            "type": "string",
            "description": "Contacts phone number",
            "example": "+380 123456789"
          },
          "favorite": {
            "type": "boolean",
            "description": "Type contact",
            "example": false
          },
          "owner": {
            "type": "string",
            "description": "Contacts owner",
            "example": "63f0c4c6c11078905fe1a78d",
            "format": "ObjectId"
          }
        }
      },
      "ContactsSchema": {
        "type": "array",
        "$ref": "#/components/schemas/ContactSchema"
      },

      "MessageResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          }
        }
      },

      "RegisterRequest": {
        "type": "object",
        "required": ["email", "password", "name"],
        "properties": {
          "email": {
            "type": "string",
            "description": "User's email",
            "format": "email",
            "example": "example@mail.com"
          },
          "password": {
            "type": "string",
            "description": "User's password",
            "example": "qwerty123"
          },
          "name": {
            "type": "string",
            "description": "User's name",
            "example": "Bob"
          }
        }
      },
      "RegisterResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "Message"
          },
          "user": {
            "type": "object",
            "$ref": "#/components/schemas/UserSchema"
          }
        }
      },

      "LoginRequest": {
        "type": "object",
        "required": ["email", "password"],
        "properties": {
          "email": {
            "type": "string",
            "description": "User's email",
            "format": "email",
            "example": "example@mail.com"
          },
          "password": {
            "type": "string",
            "description": "User`s password",
            "example": "qwerty123"
          }
        }
      },
      "LoginResponse": {
        "type": "object",
        "properties": {
          "accessToken": {
            "type": "string"
          },
          "refreshToken": {
            "type": "string"
          },
          "user": {
            "type": "object",
            "$ref": "#/components/schemas/UserSchema"
          }
        }
      },

      "RefreshRequest": {
        "type": "object",
        "required": ["refreshToken"],
        "properties": {
          "refreshToken": {
            "type": "string",
            "description": "User's refresh token"
          }
        }
      },
      "RefreshResponse": {
        "type": "object",
        "properties": {
          "accessToken": {
            "type": "string"
          },
          "refreshToken": {
            "type": "string"
          }
        }
      },

      "SubscriptionRequest": {
        "type": "object",
        "required": ["subscription"],
        "properties": {
          "subscription": {
            "type": "string",
            "description": "Type subscription  ['starter', 'pro', 'business']",
            "example": "pro"
          }
        }
      },

      "VerifyRequest": {
        "type": "object",
        "required": ["email"],
        "properties": {
          "email": {
            "type": "string",
            "example": "example@mail.com",
            "description": "User's email"
          }
        }
      },

      "UpdateAvatarRequest": {
        "required": ["avatarURL"],
        "type": "object",
        "properties": {
          "file": {
            "type": "string",
            "format": "binary",
            "description": "User's avatar"
          }
        }
      },
      "UpdateAvatarResponse": {
        "type": "object",
        "properties": {
          "avatarURL": {
            "type": "string"
          }
        }
      },

      "GetContactsResponse": {
        "type": "object",
        "properties": {
          "contacts": {
            "type": "array",
            "$ref": "#/components/schemas/ContactSchema"
          }
        }
      },

      "ContactRequest": {
        "type": "object",
        "required": ["email", "number", "name"],
        "properties": {
          "email": {
            "type": "string",
            "description": "Contacts email",
            "format": "email",
            "example": "example@mail.com"
          },
          "number": {
            "type": "string",
            "description": "Contacts number phone",
            "example": "+380991234567"
          },
          "name": {
            "type": "string",
            "description": "Contacts name",
            "example": "Frank"
          }
        }
      },

      "DeleteContactResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "Message"
          },
          "contact": {
            "type": "object",
            "$ref": "#/components/schemas/ContactSchema"
          }
        }
      },

      "UpdateFavoriteRequest": {
        "type": "object",
        "required": ["favorite"],
        "properties": {
          "favorite": {
            "type": "boolean"
          }
        }
      }
    },

    "securitySchemes": {
      "Bearer": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  }
}
